# +----------+
# | MERGETOOL \
# +------------+-------------------------------------------------------------+
# | The recommended tool for merging is meld   but you can also use other    |
# | tools if you don't like meld.  The Supported tools are listed below:     |
# +----------+-----+--------------------------+------------------------------+
# | beediff  | GUI | QT                       |                              |
# | xxdiff   | GUI | KDE   (or Gnome with QT) |                              |
# | kdiff3   | GUI | KDE   (or Gnome with QT) |                              |
# | meld     | GUI | Gnome (or KDE with GTK)  |                              |
# | gtkdiff  | GUI | Gnome (or KDE with GTK)  | STAGE 3 not supported!       |
# | gvimdiff | GUI | Gnome (or KDE with GTK)  | STAGE 3 not supported!       |
# | tkdiff   | GUI | Gnome (or KDE with TK)   |                              |
# | vimdiff  | CLI | Systems without X        | STAGE 3 not supported!       |
# | sdiff    | CLI | Systems without X        | STAGE 3 not supported!       |
# | imediff2 | CLI | Systems without X        | STAGE 3 not supported!       |
# +----------+-----+--------------------------+------------------------------+
MERGE_TOOL = /usr/bin/meld


# +--------+
# | BACKUPS \
# +----------+---------------------------------------------------------------+
# | You should leave the backups enabled because cfg-update uses the backups |
# | for automatic 3-way merging! If you have your own backup solution for    |
# | your configuration files, don't want to use the restore function and     |
# | don't want to use the 3-way merging functionality of cfg-update, then you|
# | can disable the backups. If you want cfg-update to save the backups in   |
# | another location, move the directory and change the BACKUP_PATH variable.|
# +--------------------------------------------------------------------------+
ENABLE_BACKUPS = yes


# +--------+
# | STAGE 1 \
# +----------+---------------------------------------------------------------+
# | Automatic overwriting of unmodified configuration files and binaries...  |
# | Portage stores MD5 checksums of files during installation of packages.   |
# | The checksums can be used to determine if a file has been modified after |
# | installation. If it hasn't been modified it contains default settings    |
# | and it can be safely overwritten with a newer version.                   |
# +--------------------------------------------------------------------------+
ENABLE_STAGE1 = yes


# +--------+
# | STAGE 2 \
# +----------+---------------------------------------------------------------+
# | Automatic (diff3) merging of modified configuration files...             |
# | cfg-update saves backups of the updated files. These backups can be used |
# | for 3-way merges. All files that have been updated at least one time are |
# | candidates for this type of automatic update. diff3 will use the backup  |
# | of the previous update as the ancestor file to determine which lines     |
# | contain custom settings. If cfg-update encounters a merge-conflict       |
# | (ancestor, current and new file have 3 different values) it will abort   |
# | the update so you can solve the conflict manually with the MERGETOOL.    |
# +--------------------------------------------------------------------------+
ENABLE_STAGE2 = yes


# +--------+
# | STAGE 3 \
# +----------+---------------------------------------------------------------+
# | Manual 3-way merging of modified configuration files...                  |
# | If a merge-conflict has been detected in STAGE 2, you can now solve it   |
# | manually in the MERGETOOL. Simply select the line(s) you need. When you  |
# | are done, cfg-update will replace the current configuration file with the|
# | merged result. Stage 3 works with xxdiff, beediff, kdiff3, meld, tkdiff, |
# | gtkdiff.                                                                 |
# +--------------------------------------------------------------------------+
ENABLE_STAGE3 = yes


# +--------+
# | STAGE 4 \
# +----------+---------------------------------------------------------------+
# | Manual 2-way merging of modified configuration files...                  |
# | If no backups of previous updates are found, you must merge the current  |
# | configuration file with the update in the MERGETOOL. Simply click the    |
# | line(s) you need. When you are done, cfg-update will replace the current |
# | configuration file with the merged result.                               |
# +--------------------------------------------------------------------------+
ENABLE_STAGE4 = yes


# +--------+
# | STAGE 5 \
# +----------+---------------------------------------------------------------+
# | Manual updating of files that can't be updated in the other stages...    |
# | These updates will need your full attention! There are several ways to   |
# | deal with these updates. cfg-update will present you with a number of    |
# | options depending on the situation.                                      |
# +--------------------------------------------------------------------------+
ENABLE_STAGE5 = yes


# +------------------------+
# | GENERAL CFG-UPDATE INFO \
# +--------------------------+-----------------------------------------------+
# | The script handles your configuration file updates in 5 stages:          |
# +---------+----------------------------------------------------------------+
# | STAGE 1 | Automatic overwriting of unmodified files and binaries (safe)  |
# | STAGE 2 | Automatic (diff3) merging of modified files (if backup exists) |
# | STAGE 3 | Manual 3-way merging of modified files (if backup exists)      |
# | STAGE 4 | Manual 2-way merging of modified files                         |
# | STAGE 5 | Manual update of files that can't be updated in stages 1,2,3,4 |
# +---------+----------------------------------------------------------------+
# | Stage 1 and 2 will safely update all files that can be handled without   |
# | user input and leaves the files that do need input for manual updating.  |
# | Stage 3 will only work if enabled and a tool with 3-way merge support is |
# | selected. Stage 4 works with all supported tools, it allows you to merge |
# | the two files manually. Stage 5 handles the updates that couldn't be     |
# | updated in the other stages.                                             |
# +--------------------------------------------------------------------------+
# | The state of the file determines in which stage(s) it can be updated:    |
# +-------------------+----+-----------------+-------------------------------+
# | Modified File     | MF | STAGE -,2,3,4,- | Can have custom settings      |
# | Modified Binary   | MB | STAGE -,-,-,-,5 | Has been replaced (virus?)    |
# | Unmodified File   | UF | STAGE 1,2,3,4,- | Does not have custom settings |
# | Unmodified Binary | UB | STAGE 1,-,-,-,5 | Does not have custom functions|
# | Custom File       | CF | STAGE -,-,-,4,- | Not installed with Portage    |
# | Custom Binary     | CB | STAGE -,-,-,-,5 | Not installed with Portage    |
# | Link to File      | LF | STAGE -,-,-,-,5 | Link will be replaced by file |
# | File to Link      | FL | STAGE -,-,-,-,5 | File will be replaced by link |
# | Link to Link      | LL | STAGE -,-,-,-,5 | Link will be replaced by link |
# +-------------------+----+-----------------+-------------------------------+
# | As you can see in the table above, if for example you disable STAGE 5    |
# | cfg-update will not be able to update files with states MB,CB,LF,FL,LL.  |
# | If you don't trust the automatic 3-way merging you can disable STAGE 2   |
# | to update those files manually in STAGE 3. If your tool doesn't support  |
# | 3-way merging, STAGE 3 will be skipped and updating will take place in   |
# | STAGE 4 using normal 2-way merging.                                      |
# | If you want to put cfg-update in a cronjob you can use the "-a" option   |
# | to force cfg-update to only do the "automatic" stages (1,2) and skip the |
# | updates that need manual input so you can do them later...               |
# +--------------------------------------------------------------------------+


##############################################################################
#   THE VARIABLES BELOW ARE DEFAULT SETTINGS USED INTERNALLY BY CFG-UPDATE.  #
#   YOU DO NOT NEED TO SPECIFY THEM UNLESS YOUR SYSTEM DEVIATES FROM THESE   #
#   DEFAULT VALUES...                                                        #
##############################################################################
#
# VIEW_TOOL    = less                                      # this can be changed to an editor like "nano -w" or "vi"
# BACKUP_PATH  = /var/lib/cfg-update/backups               # this is where cfg-update will save the backups
# INDEX_FILE   = /var/lib/cfg-update/checksum.index        # this file contains all MD5 checksums for the host
# PKG_DB       = /var/db/pkg                               # this directory contains the CONTENTS files (you can change it when your system uses another location)
# HOSTS_FILE   = /etc/cfg-update.hosts                     # this file contains all sshfs-mount settings for updating remote machines from a single location
# XXDIFF_STYLE = "--style Keramik"                         # this variable controls the style of xxdiff
# SDIFF_FLAGS  = "-d"                                      # this variable contains additional arguments passed to sdiff
#
##############################################################################
#   IF YOU CHANGE THE FILENAME FORMAT VARIABLES, CFG-UPDATE WILL BE BROKEN!  #
##############################################################################
#
# CONFIG_NEW   = "._cfg????_*"                             # filename format for search string which is used to find the config file updates
# RM_NEW       = "\._cfg...._"                             # filename format for regular expression that strips CONFIG_NEW from filename
# TEMP_NEW     = "._temp-new-cfg_*"                        # filename format for temporary storage of ._cfg0000_ file update during merging
# BACKUP_NEW   = "._new-cfg_*"                             # filename format for backup new config file
# RESTORE_NEW  = "._cfg0000_*"                             # filename format for restoring the new config file
# RM_OLD       = "\._old-cfg_"                             # filename format for regular expression that strips BACKUP_OLD from filename
# TEMP_OLD     = "._temp-old-cfg_*"                        # filename format for temporary storage of current config file during merging
# BACKUP_OLD   = "._old-cfg_*"                             # filename format for backup current config file
# RESTORE_OLD  = "*"                                       # filename format for restoring the old config file
# MERGED       = "*.merge"                                 # filename format for temporary storage of the merged result
#
